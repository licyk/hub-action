name: Build Fooocus

on:
  push:
  # delete:
  # create:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # UTC 17:00 -> CST (China) 1:00, see https://datetime360.com/cn/utc-cst-china-time/
  # https://docs.github.com/zh/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#schedule
  - cron: '15 16 * * 0'
  workflow_dispatch:

jobs:
  Build-Fooocus:
    name: Build Fooocus
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: List files in the repository
        shell: pwsh
        run: |
          Get-ChildItem -Path "${{ github.workspace }}" -Recurse
          foreach ($i in $ENV:PATH.Split(';')) { Write-Host "bin: $i" }
          Copy-Item -Path "${{ github.workspace }}/.github/nvidia-smi.bat" -Destination "C:/Program Files/Git/cmd/nvidia-smi.bat" -Force
      
      - name: Test
        shell: python
        run: |
          import re
          import subprocess



          def get_cuda_comp_cap() -> float:
              # Returns float of CUDA Compute Capability using nvidia-smi
              # Returns 0.0 on error
              # CUDA Compute Capability
              # ref https://developer.nvidia.com/cuda-gpus
              # ref https://en.wikipedia.org/wiki/CUDA
              # Blackwell consumer GPUs should return 12.0 data-center GPUs should return 10.0
              try:
                  return max(map(float, subprocess.check_output(['nvidia-smi', '--query-gpu=compute_cap', '--format=noheader,csv'], text=True).splitlines()))
              except Exception as _:
                  return 0.0


          def get_cuda_version() -> str:
              try:
                  # 获取nvidia-smi输出
                  output = subprocess.check_output(['nvidia-smi', '-q'], text=True)
                  match = re.search(r'CUDA Version\s+:\s+(\d+\.\d+)', output)
                  if match:
                      return match.group(1)
                  return 0.0
              except:
                  return 0.0


          def compare_versions(version1: str, version2: str) -> int:
              try:
                  nums1 = re.sub(r'[a-zA-Z]+', '', version1).replace('-', '.').replace('+', '.').split('.')
                  nums2 = re.sub(r'[a-zA-Z]+', '', version2).replace('-', '.').replace('+', '.').split('.')
              except:
                  return 0

              for i in range(max(len(nums1), len(nums2))):
                  num1 = int(nums1[i]) if i < len(nums1) else 0
                  num2 = int(nums2[i]) if i < len(nums2) else 0

                  if num1 == num2:
                      continue
                  elif num1 > num2:
                      return 1
                  else:
                      return -1

              return 0


          def is_vers_ge(ver_1: str, ver_2: str) -> bool:
              if compare_versions(ver_1, ver_2) == 1 or compare_versions(ver_1, ver_2) == 0:
                  return True
              return False


          def select_avaliable_cuda_type() -> str:
              cuda_comp_cap = get_cuda_comp_cap()
              cuda_support_ver = get_cuda_version()

              if is_vers_ge(cuda_support_ver, '12.8'):
                  return 'cu128'
              elif is_vers_ge(cuda_support_ver, '12.6'):
                  return 'cu126'
              elif is_vers_ge(cuda_support_ver, '12.4'):
                  return 'cu124'
              elif is_vers_ge(cuda_support_ver, '12.1'):
                  return 'cu121'
              elif is_vers_ge(cuda_support_ver, '11.8'):
                  return 'cu118'

              if compare_versions(cuda_comp_cap, '10.0') == 1:
                  return 'cu128' # RTX 50xx
              else:
                  return 'cu118' # 其他 Nvidia 显卡



          if __name__ == '__main__':
              print(select_avaliable_cuda_type())